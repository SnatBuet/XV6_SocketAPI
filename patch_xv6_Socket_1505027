commit d01b2f27b26f2b5826f2fb492e314cafbb6fbdca
Author: Tisha <nahidatisha2016@gmail.com>
Date:   Sat Jan 19 20:01:25 2019 +0600

    commit 2

diff --git a/Makefile b/Makefile
index 09d790c..e011a93 100644
--- a/Makefile
+++ b/Makefile
@@ -16,12 +16,14 @@ OBJS = \
 	pipe.o\
 	proc.o\
 	sleeplock.o\
+	sock.o\
 	spinlock.o\
 	string.o\
 	swtch.o\
 	syscall.o\
 	sysfile.o\
 	sysproc.o\
+	syssock.o\
 	trapasm.o\
 	trap.o\
 	uart.o\
@@ -181,6 +183,7 @@ UPROGS=\
 	_usertests\
 	_wc\
 	_zombie\
+	_socktest\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
diff --git a/defs.h b/defs.h
index 82fb982..ae6ae7e 100644
--- a/defs.h
+++ b/defs.h
@@ -121,6 +121,14 @@ int             wait(void);
 void            wakeup(void*);
 void            yield(void);
 
+// sock.c
+void            sinit(void);
+int             listen(int);
+int             connect(int, const char*);
+int             send(int, const char*, int);
+int             recv(int, char*, int);
+int             disconnect(int);
+
 // swtch.S
 void            swtch(struct context**, struct context*);
 
diff --git a/error.h b/error.h
new file mode 100644
index 0000000..8fd820a
--- /dev/null
+++ b/error.h
@@ -0,0 +1,5 @@
+#define E_NOTFOUND -1025
+#define E_ACCESS_DENIED -1026
+#define E_WRONG_STATE -1027
+#define E_FAIL -1028
+#define E_INVALID_ARG -1029
\ No newline at end of file
diff --git a/main.c b/main.c
index 9924e64..ac0b23e 100644
--- a/main.c
+++ b/main.c
@@ -4,6 +4,7 @@
 #include "memlayout.h"
 #include "mmu.h"
 #include "proc.h"
+#include "sock.h"
 #include "x86.h"
 
 static void startothers(void);
@@ -27,10 +28,11 @@ main(void)
   consoleinit();   // console hardware
   uartinit();      // serial port
   pinit();         // process table
+  sinit();         // socket table
   tvinit();        // trap vectors
   binit();         // buffer cache
   fileinit();      // file table
-  ideinit();       // disk 
+  ideinit();       // disk
   startothers();   // start other processors
   kinit2(P2V(4*1024*1024), P2V(PHYSTOP)); // must come after startothers()
   userinit();      // first user process
diff --git a/param.h b/param.h
index a7e90ef..f8e5027 100644
--- a/param.h
+++ b/param.h
@@ -1,3 +1,5 @@
+#define NPORT       128  // maximum number of ports
+#define NSOCK        32  // maximum number of sockets
 #define NPROC        64  // maximum number of processes
 #define KSTACKSIZE 4096  // size of per-process kernel stack
 #define NCPU          8  // maximum number of CPUs
diff --git a/sock.c b/sock.c
new file mode 100644
index 0000000..f3aacbf
--- /dev/null
+++ b/sock.c
@@ -0,0 +1,324 @@
+#include "types.h"
+#include "defs.h"
+#include "param.h"
+#include "spinlock.h"
+#include "sock.h"
+#include "memlayout.h"
+#include "mmu.h"
+#include "error.h"
+#include "x86.h"
+#include "proc.h"
+#define NULL 0
+#define WS -100
+
+int nextsid = 1;
+struct sock *sl = NULL;
+struct sock *sli = NULL;
+struct sock *ss = NULL;
+struct sock *sr = NULL;
+int state = 0;
+struct
+{
+  struct spinlock lock;
+  struct sock sock[NSOCK];
+} stable;
+
+void sinit(void)
+{
+  nextsid = 1;
+  state = 0;
+  sl = sli = ss = sr = NULL;
+  initlock(&stable.lock, "stable");
+}
+
+
+int getState(int lport){
+  struct sock *s;
+  for (s = stable.sock; s < &stable.sock[NSOCK]; s++)
+  {
+    if (s->local_port == lport)
+    {
+      return WS;
+    }
+  }
+  return NULL;
+}
+
+struct sock *getSocketListen(int lport)
+{
+  struct sock *s;
+  for (s = stable.sock; s < &stable.sock[NSOCK]; s++)
+  {
+    if ((s->state != DISCONNECTED) && (s->local_port == lport))
+    {
+      return s;
+    }
+  }
+  return NULL;
+}
+
+int listen(int lport)
+{
+  struct sock *s;
+  acquire(&stable.lock);
+  s = getSocketListen(lport);
+  if (s == NULL)
+  {
+    goto FOUND_LISTEN;
+  }
+  release(&stable.lock);
+  return E_NOTFOUND;
+FOUND_LISTEN:
+  if(nextsid>32){
+    return E_FAIL;
+  }
+  s = &stable.sock[nextsid];
+  s->state = LISTENING;
+  s->local_port = lport;
+  s->remote_port = 100;
+  s->sid = nextsid++;
+  s->owner = myproc();
+  sli = s;
+  sleep(&stable.sock[nextsid - 1], &stable.lock);
+  release(&stable.lock);
+  return 0;
+}
+
+struct sock *getSocketConnect(int rport)
+{
+  struct sock *s;
+  for (s = stable.sock; s < &stable.sock[NSOCK]; s++)
+  {
+    if ((s->state == LISTENING) && (s->local_port == rport))
+    {
+      return s;
+    }
+  }
+  return NULL;
+}
+
+int connect(int rport, const char *host)
+{
+  struct sock *s;
+  acquire(&stable.lock);
+  s = getSocketConnect(rport);
+  if (s == NULL)
+  {
+    goto NOTFOUND_CONNECT;
+  }
+  s->state = CONNECTED;
+
+  if(nextsid>32){
+    return E_FAIL;
+  }
+  struct sock *client = &stable.sock[nextsid];
+  client->state = CONNECTED;
+  client->local_port = 100;
+  client->remote_port = rport;
+  client->sid = nextsid++;
+  client->owner = myproc();
+
+  if (sli != NULL)
+  {
+    wakeup(&stable.sock[nextsid - 2]);
+    sli = NULL;
+  }
+  release(&stable.lock);
+  return client->local_port;
+NOTFOUND_CONNECT:
+  release(&stable.lock);
+  return E_NOTFOUND;
+}
+
+
+struct sock *getSocket(int lport)
+{
+  struct sock *s;
+  struct sock *t;
+  for (s = stable.sock; s < &stable.sock[NSOCK]; s++)
+  {
+    if ((s->state == CONNECTED) && (s->local_port == lport))
+    {
+      goto GETRPORT;
+    }
+  }
+  return NULL;
+GETRPORT:
+  for (t = stable.sock; t < &stable.sock[NSOCK]; t++)
+  {
+    if ((t->state == CONNECTED) && (t->local_port == s->remote_port))
+    {
+      return t;
+    }
+  }
+  return NULL;
+}
+
+struct sock *getSocketSelf(int lport)
+{
+  struct sock *s;
+  for (s = stable.sock; s < &stable.sock[NSOCK]; s++)
+  {
+    if ((s->state == CONNECTED) && (s->local_port == lport))
+    {
+      return s;
+    }
+  }
+  return NULL;
+}
+
+
+
+int send(int lport, const char *data, int n)
+{
+  struct sock *s;
+  struct sock *sk;
+  struct proc *curproc = myproc();
+  acquire(&stable.lock);
+  s = getSocket(lport);
+  sk = getSocketSelf(lport);
+  if(sk == NULL){
+    if(getState(lport) == WS){
+      goto WRONG_STATE_SEND;
+    }
+    goto NOTFOUND_SOCKET_SEND;
+  }
+  if (s == NULL)
+  {
+    if(getState(sk->remote_port) == WS){
+      goto WRONG_STATE_SEND;
+    }
+    goto NOTFOUND_SOCKET_SEND;
+  }
+  if (sk->owner != curproc)
+  {
+    goto ACCESS_DENIED_SEND;
+  }
+  if (sr != NULL)
+  {
+    wakeup(&stable.sock[sr->sid]);
+    sr = NULL;
+  }
+  if (strlen(s->buffer) > 0)
+  {
+    sl = sk;
+    sleep(&stable.sock[sk->sid], &stable.lock);
+  }
+  strncpy(s->buffer, data, n);
+  release(&stable.lock);
+  return 0;
+
+WRONG_STATE_SEND:
+  release(&stable.lock);
+  return E_WRONG_STATE;
+ACCESS_DENIED_SEND:
+  release(&stable.lock);
+  return E_ACCESS_DENIED;
+NOTFOUND_SOCKET_SEND:
+  release(&stable.lock);
+  return E_NOTFOUND;
+}
+
+struct sock *getSocketRecv(int lport)
+{
+  struct sock *s;
+  for (s = stable.sock; s < &stable.sock[NSOCK]; s++)
+  {
+    if ((s->state == CONNECTED) && (s->local_port == lport))
+    {
+      return s;
+    }
+  }
+  return NULL;
+}
+
+int recv(int lport, char *data, int n)
+{
+  struct sock *s;
+  struct proc *curproc = myproc();
+  acquire(&stable.lock);
+  s = getSocketRecv(lport);
+
+  if (s == NULL)
+  {
+    if(getState(lport) == WS){
+      goto WRONG_STATE_RECV;
+    }
+    goto NOTFOUND_SOCKET_RECV;
+  }
+  if (s->owner != curproc)
+  {
+    goto ACCESS_DENIED_RECV;
+  }
+  if (sl != NULL)
+  {
+    wakeup(&stable.sock[sl->sid]);
+    sl = NULL;
+  }
+  if (strlen(s->buffer) <= 0)
+  {
+    sr = s;
+    sleep(&stable.sock[s->sid], &stable.lock);
+  }
+  strncpy(data, s->buffer, n);
+  s->buffer[0] = '\0';
+  s = getSocket(lport);
+  if (s == NULL)
+  {
+    goto NOTFOUND_SOCKET_RECV;
+  }
+
+  release(&stable.lock);
+  return 0;
+
+WRONG_STATE_RECV:
+  state = 0;
+  release(&stable.lock);
+  return E_WRONG_STATE;
+ACCESS_DENIED_RECV:
+  release(&stable.lock);
+  return E_ACCESS_DENIED;
+NOTFOUND_SOCKET_RECV:
+  release(&stable.lock);
+  return E_NOTFOUND;
+}
+
+int disconnect(int lport)
+{
+  struct sock *s;
+  struct proc *curproc = myproc();
+  acquire(&stable.lock);
+  s = getSocketListen(lport);
+  if (s == NULL)
+  {
+    goto NOTFOUND_DISCONNECT;
+  }
+  if (s->owner != curproc)
+  {
+    goto ACCESS_DENIED_DISCONNECT;
+  }
+  if (sli != NULL)
+  {
+    wakeup(&stable.sock[sli->sid]);
+    sli = NULL;
+  }
+  if (sr != NULL)
+  {
+    wakeup(&stable.sock[sr->sid]);
+    sr = NULL;
+  }
+  if (sl != NULL)
+  {
+    wakeup(&stable.sock[sl->sid]);
+    sl = NULL;
+  }
+  s->state = DISCONNECTED;
+  release(&stable.lock);
+  return 0;
+ACCESS_DENIED_DISCONNECT:
+  release(&stable.lock);
+  return E_ACCESS_DENIED;
+NOTFOUND_DISCONNECT:
+  release(&stable.lock);
+  return E_NOTFOUND;
+}
diff --git a/sock.h b/sock.h
new file mode 100644
index 0000000..03897e7
--- /dev/null
+++ b/sock.h
@@ -0,0 +1,27 @@
+
+//
+// TODO: Define an enumeration to represent socket state.
+//
+
+enum sockstate { DISCONNECTED, LISTENING, CONNECTED };
+
+struct sock
+{
+    //pde_t *pgdir;               // Page table
+    //char *kstack;               // Bottom of kernel stack for this process
+    enum sockstate state;       // Process state
+    struct proc *owner;        // Parent process
+    //struct trapframe *tf;       // Trap frame for current syscall
+    //struct context *context;    // swtch() here to run process
+    //void *chan;                 // If non-zero, sleeping on chan
+    //int killed;                 // If non-zero, have been killed
+    //struct file *ofile[NOFILE]; // Open files
+    char buffer[128];              // Process name (debugging)
+    int local_port;
+    int remote_port;
+    int sid;
+};
+
+//
+// TODO: Define a structure to represent a socket.
+//
diff --git a/socktest.c b/socktest.c
new file mode 100644
index 0000000..c956e77
--- /dev/null
+++ b/socktest.c
@@ -0,0 +1,75 @@
+#include "types.h"
+#include "user.h"
+#include "error.h"
+
+int serverPort = 10;
+
+void clientProc() {
+  int clientPort;
+  char buf[128];
+  char host[16] = "localhost";
+
+  // sleep for 100 clock ticks to ensure that the server process starts first.
+  sleep(100);
+
+  printf(1, "Client>> Attempting to connect to port %d, host %s ...\n", serverPort, host);
+  clientPort = connect(serverPort, host);
+  
+  sleep(20);
+  printf(1, "Client>> connect() returned %d\n", clientPort);
+  
+  while (1) {
+    printf(1, "Client>> Enter text to send to server: ");
+    gets(buf, sizeof(buf));
+    buf[strlen(buf) - 1] = '\0'; // Eliminating the '\n'
+    send(clientPort, buf, strlen(buf) + 1);
+
+    if (0 == strcmp(buf, "exit")) {
+      printf(1, "Client exiting...\n");
+      disconnect(clientPort);
+      break;
+    }
+    
+    sleep(100 + uptime() % 100);
+
+    recv(clientPort, buf, sizeof(buf));
+    printf(1, "Client>> Received: \"%s\"\n", buf);
+  }
+}
+
+void serverProc() {
+  char buf[128];
+
+  printf(1, "Server>> Starting to listen at port %d ...\n", serverPort);
+  printf(1, "Server>> listen() returned %d\n", listen(serverPort));
+  
+  while (1) {
+    recv(serverPort, buf, sizeof(buf));
+    printf(1, "Server>> Received: \"%s\"\n", buf);
+
+    if (0 == strcmp(buf, "exit")) {
+      printf(1, "Server exiting...\n");
+      disconnect(serverPort);
+      break;
+    }
+    
+    sleep(100 + uptime() % 100);
+
+    strcpy(buf+strlen(buf), " OK");
+    send(serverPort, buf, strlen(buf) + 1);
+  }
+}
+
+
+int main(int argc, char *argv[])
+{
+  if (0 == fork()) {
+    clientProc();
+    exit();
+  } else {
+    serverProc();
+    // This is the parent process. So, it needs to wait before client terminates
+    wait();
+    exit();
+  }
+}
diff --git a/syscall.c b/syscall.c
index ee85261..c06bb58 100644
--- a/syscall.c
+++ b/syscall.c
@@ -60,7 +60,7 @@ argptr(int n, char **pp, int size)
 {
   int i;
   struct proc *curproc = myproc();
- 
+
   if(argint(n, &i) < 0)
     return -1;
   if(size < 0 || (uint)i >= curproc->sz || (uint)i+size > curproc->sz)
@@ -103,6 +103,11 @@ extern int sys_unlink(void);
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
+extern int sys_listen(void);
+extern int sys_connect(void);
+extern int sys_send(void);
+extern int sys_recv(void);
+extern int sys_disconnect(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -126,6 +131,11 @@ static int (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_listen]  sys_listen,
+[SYS_connect] sys_connect,
+[SYS_send]    sys_send,
+[SYS_recv]    sys_recv,
+[SYS_disconnect] sys_disconnect
 };
 
 void
diff --git a/syscall.h b/syscall.h
index bc5f356..289fb4b 100644
--- a/syscall.h
+++ b/syscall.h
@@ -20,3 +20,8 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_listen  22
+#define SYS_connect  23
+#define SYS_send  24
+#define SYS_recv  25
+#define SYS_disconnect  26
diff --git a/syssock.c b/syssock.c
new file mode 100644
index 0000000..359d62d
--- /dev/null
+++ b/syssock.c
@@ -0,0 +1,108 @@
+#include "types.h"
+#include "defs.h"
+#include "param.h"
+#include "error.h"
+#include "memlayout.h"
+#include "mmu.h"
+#include "x86.h"
+#include "proc.h"
+
+int
+sys_listen(void)
+{
+  int port = 0;
+
+  //
+  // TODO: Write your code to get and validate port no.
+  //
+  argint(0, &port);
+  if(port < 0){
+    return E_INVALID_ARG;
+  }
+  //cprintf("in sys_listen\n");
+  return listen(port);
+}
+
+int
+sys_connect(void)
+{
+  int port = 0;
+  char *host = 0;
+  argint(0, &port);
+  //cprintf("in sys_connect\n");
+  if(port < 0){
+    return E_INVALID_ARG;
+  }
+  //cprintf("in sys_connect\n");
+  argstr(1, &host);
+  if(!strncmp(host,"localhost",9)){
+    goto FOUND;
+  }
+  else if(!strncmp(host,"127.0.0.1",9)){
+    goto FOUND;
+  }
+  //cprintf("in sys_connect\n");
+  return E_INVALID_ARG;
+FOUND:
+  return connect(port, host);
+}
+
+int
+sys_send(void)
+{
+  int port = 0;
+  char* buf = 0;
+  int n = 0;
+  //
+  // TODO: Write your code to get and validate port no., buffer and buffer size
+  //
+  argint(0, &port);
+  if(port < 0){
+    return E_INVALID_ARG;
+  }
+  argstr(1, &buf);
+  
+  argint(2, &n);
+  if(n<0){
+    return E_INVALID_ARG;
+  }
+  return send(port, buf, n);
+}
+
+int
+sys_recv(void)
+{
+  int port = 0;
+  char* buf = 0;
+  int n = 0;
+
+  argint(0, &port);
+  if(port < 0){
+    return E_INVALID_ARG;
+  }
+  argstr(1, &buf);
+  argint(2, &n);
+  if(n<0){
+    return E_INVALID_ARG;
+  }
+  //
+  // TODO: Write your code to get and validate port no., buffer and buffer size
+  //
+
+  return recv(port, buf, n);
+}
+
+int
+sys_disconnect(void)
+{
+  int port = 0;
+
+  //
+  // TODO: Write your code to get and validate port no.
+  //
+  if(argint(0, &port) < 0){
+    return E_INVALID_ARG;
+  }
+
+  return disconnect(port);
+}
diff --git a/user.h b/user.h
index 4f99c52..ce9f2f1 100644
--- a/user.h
+++ b/user.h
@@ -23,6 +23,11 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int listen(int);
+int connect(int, const char* host);
+int send(int, const char*, int);
+int recv(int, char*, int);
+int disconnect(int);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/usys.S b/usys.S
index 8bfd8a1..2ac5ed0 100644
--- a/usys.S
+++ b/usys.S
@@ -29,3 +29,9 @@ SYSCALL(getpid)
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(listen)
+SYSCALL(connect)
+SYSCALL(send)
+SYSCALL(recv)
+SYSCALL(disconnect)
+
